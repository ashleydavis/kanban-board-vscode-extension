{
    "version": 2,
    "sheet": {
        "id": "c140df40-f7ef-11ea-ab46-01bb20ac1334",
        "language": "javascript",
        "cells": [
            {
                "id": "065600a0-f7f1-11ea-ab46-01bb20ac1334",
                "cellType": "markdown",
                "code": "# Try outs for Unified + Remark Parse\r\n\r\nThis JavaScript notebook is for testing out the npm library [Unified](https://www.npmjs.com/package/unified) combined with [Remark Parse](https://www.npmjs.com/package/remark-parse).\r\n\r\n**PROBLEM:**    \r\n\r\nI need to be able to deserialize a markdown file to an in-memory data structure, make changes to it then serialize it back out to a markdown file.",
                "lastEvaluationDate": "2020-09-16T18:44:13.256+10:00",
                "output": [],
                "errors": [],
                "height": 173
            },
            {
                "id": "56981d50-f7f1-11ea-ab46-01bb20ac1334",
                "cellType": "markdown",
                "code": "## Step 1\r\n\r\nImport the libraries from npm. Data-Forge Notebook automatically detects and installs them ready for use.",
                "lastEvaluationDate": "2020-09-16T18:44:13.257+10:00",
                "output": [],
                "errors": [],
                "height": 102
            },
            {
                "id": "c1410650-f7ef-11ea-ab46-01bb20ac1334",
                "cellType": "code",
                "cellScope": "global",
                "code": "const unified = require(\"unified\");\r\nconst markdown = require(\"remark-parse\");",
                "lastEvaluationDate": "2020-10-23T07:10:35.323+10:00",
                "output": [],
                "errors": [],
                "height": 82
            },
            {
                "id": "013ebfd0-f7f1-11ea-ab46-01bb20ac1334",
                "cellType": "markdown",
                "code": "## Step 2\r\n\r\nLoad the test markdown file into memory and verify that it was loaded correctly.",
                "lastEvaluationDate": "2020-09-16T18:44:13.257+10:00",
                "output": [],
                "errors": [],
                "height": 102
            },
            {
                "id": "82186530-f7f0-11ea-ab46-01bb20ac1334",
                "cellType": "code",
                "cellScope": "global",
                "code": "const datakit = require(\"datakit\");\r\n\r\nconst markdownFileContent = await datakit.readFile(\"./todo.md\");\r\ndisplay.text(markdownFileContent);",
                "lastEvaluationDate": "2020-10-23T07:10:36.735+10:00",
                "output": [
                    {
                        "value": {
                            "displayType": "text",
                            "data": "# Example of TODO.md\n\nThis is an example of TODO.md\n\nView the raw content of this file to understand the format.\n\n### Todo\n\n- [ ] Work on the website ~3d #feat @john 2020-03-20  \n- [ ] Fix the homepage ~1d #bug @jane  \n  - [ ] Sub-task or description  \n\n### In Progress\n\n- [ ] Work on Github Repo [JIRA-345]  \n\n### Done ✓\n\n- [x] Create my first TODO.md  "
                        }
                    }
                ],
                "errors": [],
                "height": 118
            },
            {
                "id": "683d2c80-f7f1-11ea-ab46-01bb20ac1334",
                "cellType": "markdown",
                "code": "## Step 3\r\n\r\nUse Unified + Remark-Parse to parse the markdown to an AST.",
                "lastEvaluationDate": "2020-09-16T18:44:13.257+10:00",
                "output": [],
                "errors": [],
                "height": 102
            },
            {
                "id": "10abfce0-f7f0-11ea-ab46-01bb20ac1334",
                "cellType": "code",
                "cellScope": "global",
                "code": "const fromMarkdownProcessor = unified().use(markdown);\r\n\r\nconst markdownAST = fromMarkdownProcessor.parse(markdownFileContent);\r\ndisplay(markdownAST);",
                "lastEvaluationDate": "2020-10-23T07:10:36.841+10:00",
                "output": [],
                "errors": [
                    {
                        "msg": "processor is not defined\r\nat Code cell, line 3"
                    }
                ],
                "height": 174
            },
            {
                "id": "4adb4140-f7f6-11ea-ab46-01bb20ac1334",
                "cellType": "markdown",
                "code": "## Step 4\r\n\r\nSerialize the AST back to markdown text to check that this can be done.",
                "lastEvaluationDate": "2020-09-16T18:44:13.257+10:00",
                "output": [],
                "errors": [],
                "height": 102
            },
            {
                "id": "455a1b10-f7f6-11ea-ab46-01bb20ac1334",
                "cellType": "code",
                "cellScope": "global",
                "code": "const stringify = require('remark-stringify');\r\nconst toMarkdownProcessor = unified().use(stringify);\r\n\r\nconst serializedMarkdown = toMarkdownProcessor.stringify(markdownAST);\r\ndisplay.text(serializedMarkdown);",
                "lastEvaluationDate": "2020-09-16T18:30:25.748+10:00",
                "output": [
                    {
                        "value": {
                            "displayType": "text",
                            "data": "# Example of TODO.md\n\nThis is an example of TODO.md\n\nView the raw content of this file to understand the format.\n\n### Todo\n\n-   [ ] Work on the website ~3d #feat @john 2020-03-20  \n-   [ ] Fix the homepage ~1d #bug @jane  \n    -   [ ] Sub-task or description  \n\n### In Progress\n\n-   [ ] Work on Github Repo [JIRA-345]  \n\n### Done ✓\n\n-   [x] Create my first TODO.md  \n"
                        }
                    }
                ],
                "errors": [],
                "height": 193
            }
        ]
    }
}